

#include <armFirmware.h>

LOG_MODULE_REGISTER(cdc_acm_echo, LOG_LEVEL_INF);


//stepper
// #define DIR_PIN  27
// #define PUL_PIN  14

#define GEAR_RATIO 47.0
//#define MICROSTEP  400
#define STEPS_PER_REVOLUTION 200 //INCLUDES MICROSTEP Generally, stepper motors have 200 steps per revolution
#define FULL_STEP_SEQUENCE ((int)(STEPS_PER_REVOLUTION * GEAR_RATIO))

uint8_t ring_buffer[RING_BUF_SIZE];
struct ring_buf ringbuf;
/* queue to store up to 10 messages (aligned to 4-byte boundary) */
K_MSGQ_DEFINE(uart_msgq, MSG_SIZE, 10, 4);

// USB - UART connection
#if defined(CONFIG_USB_DEVICE_STACK_NEXT)
USBD_CONFIGURATION_DEFINE(config_1,
			  USB_SCD_SELF_POWERED,
			  200);
USBD_DESC_LANG_DEFINE(sample_lang);
USBD_DESC_MANUFACTURER_DEFINE(sample_mfr, "ZEPHYR");
USBD_DESC_PRODUCT_DEFINE(sample_product, "Zephyr USBD CDC ACM");
USBD_DESC_SERIAL_NUMBER_DEFINE(sample_sn, "0123456789ABCDEF");

USBD_DEVICE_DEFINE(sample_usbd,
		   DEVICE_DT_GET(DT_NODELABEL(zephyr_udc0)),
		   0x2fe3, 0x0001);
#endif /* IS_ENABLED(CONFIG_USB_DEVICE_STACK_NEXT) */
//static const struct device *const uart_dev = DEVICE_DT_GET(DT_NODELABEL(lpuart6));


static int steps_remaining = 0;

static int des_pos = 0;
static int pos = 0;
static bool dir = 0;

static bool moving = 0;

/* receive buffer used in UART ISR callback */

// static char rx_buf[MSG_SIZE];
// static int rx_buf_pos;

/*
 * Read characters from UART until line end is detected. Afterwards push the
 * data to the message queue.
 */
static int enable_usb_device_next(void)
{
	int err;

	err = usbd_add_descriptor(&sample_usbd, &sample_lang);
	if (err) {
		// LOG_ERR("Failed to initialize language descriptor (%d)", err);
		return err;
	}

	err = usbd_add_descriptor(&sample_usbd, &sample_mfr);
	if (err) {
		// LOG_ERR("Failed to initialize manufacturer descriptor (%d)", err);
		return err;
	}

	err = usbd_add_descriptor(&sample_usbd, &sample_product);
	if (err) {
		// LOG_ERR("Failed to initialize product descriptor (%d)", err);
		return err;
	}

	err = usbd_add_descriptor(&sample_usbd, &sample_sn);
	if (err) {
		// LOG_ERR("Failed to initialize SN descriptor (%d)", err);
		return err;
	}

	err = usbd_add_configuration(&sample_usbd, &config_1);
	if (err) {
		// LOG_ERR("Failed to add configuration (%d)", err);
		return err;
	}

	err = usbd_register_class(&sample_usbd, "cdc_acm_0", 1);
	if (err) {
		// LOG_ERR("Failed to register CDC ACM class (%d)", err);
		return err;
	}

	err = usbd_init(&sample_usbd);
	if (err) {
		// LOG_ERR("Failed to initialize device support");
		return err;
	}

	err = usbd_enable(&sample_usbd);
	if (err) {
		// LOG_ERR("Failed to enable device support");
		return err;
	}

	// LOG_DBG("USB device support enabled");

	return 0;
}

static void interrupt_handler(const struct device *dev, void *user_data)
{
	ARG_UNUSED(user_data);

	while (uart_irq_update(dev) && uart_irq_is_pending(dev)) {
		if (uart_irq_rx_ready(dev)) {
			int recv_len, rb_len;
			uint8_t buffer[64];
			size_t len = MIN(ring_buf_space_get(&ringbuf),
					 sizeof(buffer));

			recv_len = uart_fifo_read(dev, buffer, len);
			if (recv_len < 0) {
				// LOG_ERR("Failed to read UART FIFO");
				recv_len = 0;
			};

			rb_len = ring_buf_put(&ringbuf, buffer, recv_len);
			if (rb_len < recv_len) {
				// LOG_ERR("Drop %u bytes", recv_len - rb_len);
			}

			// LOG_DBG("tty fifo -> ringbuf %d bytes", rb_len);
			if (rb_len) {
				uart_irq_tx_enable(dev);
			}
		}

		if (uart_irq_tx_ready(dev)) {
			uint8_t buffer[64];
			int rb_len, send_len;

			rb_len = ring_buf_get(&ringbuf, buffer, sizeof(buffer));
			if (!rb_len) {
				// LOG_DBG("Ring buffer empty, disable TX IRQ");
				uart_irq_tx_disable(dev);
				continue;
			}

			send_len = uart_fifo_fill(dev, buffer, rb_len);
			if (send_len < rb_len) {
				// LOG_ERR("Drop %d bytes", rb_len - send_len);
			}

			// LOG_DBG("ringbuf -> tty fifo %d bytes", send_len);
		}
	}
}




/*
 * Print a null-terminated string character by character to the UART interface
//  */
// void print_uart(char *buf)
// {
// 	int msg_len = strlen(buf);

// 	for (int i = 0; i < msg_len; i++) {
// 		uart_poll_out(uart_dev, buf[i]);
// 	}
// }

/*
    step steppers

*/


// int calc_steps_remaining(){
//     int displacement = des_pos - pos;
//     dir = (des_pos > pos);
// //k_sleep(K_MSEC(5));
//     return abs(displacement);

// }

// void step() {


// if(!moving){
//     k_timer_start(&stepper_timer, K_NO_WAIT, K_NO_WAIT);
// }
//     // Set the direction
//     steps_remaining = calc_steps_remaining();

//     gpio_pin_set(gpio_dev, DIR_PIN, dir);
//     // Pulse the PUL pin for the given number of steps

// }

int main(void)
{
    const struct device *dev;
	uint32_t baudrate, dtr = 0U;
	int ret;

	dev = DEVICE_DT_GET_ONE(zephyr_cdc_acm_uart);
	if (!device_is_ready(dev)) {
		// LOG_ERR("CDC ACM device not ready");
		return 0;
	}

    	ret = enable_usb_device_next();

	ring_buf_init(&ringbuf, sizeof(ring_buffer), ring_buffer);

	while (true) {
		uart_line_ctrl_get(dev, UART_LINE_CTRL_DTR, &dtr);
		if (dtr) {
			break;
		} else {
			/* Give CPU resources to low priority threads. */
			k_sleep(K_MSEC(100));
		}
	}

	// LOG_INF("DTR set");

	/* They are optional, we use them to test the interrupt endpoint */
	ret = uart_line_ctrl_set(dev, UART_LINE_CTRL_DCD, 1);
	if (ret) {
		// LOG_WRN("Failed to set DCD, ret code %d", ret);
	}

	ret = uart_line_ctrl_set(dev, UART_LINE_CTRL_DSR, 1);
	if (ret) {
		// LOG_WRN("Failed to set DSR, ret code %d", ret);
	}

	/* Wait 100ms for the host to do all settings */
	k_msleep(100);

	ret = uart_line_ctrl_get(dev, UART_LINE_CTRL_BAUD_RATE, &baudrate);
	if (ret) {
		// LOG_WRN("Failed to get baudrate, ret code %d", ret);
	} else {
		// LOG_INF("Baudrate detected: %d", baudrate);
	}

	uart_irq_callback_set(dev, interrupt_handler);

	/* Enable rx interrupts */
	uart_irq_rx_enable(dev);

    // if (!gpio_dev) {
    //     printk("Cannot find GPIO device!\n");
    //     return 0;
    // }

Axis axes[NUM_AXES];

//initiate axes
for (int i = 0; i < NUM_AXES; i++){

    axes[i].STEP_PIN = stepPins[i];
    axes[i].DIR_PIN = dirPins[i];
    axes[i].ENC_PIN_A = dirPins[i];
    axes[i].ENC_PIN_B = dirPins[i];
    axes[i].PPR = dirPins[i];
    axes[i].REDUCTION = dirPins[i];
    axes[i].steps_remaining = 0;
    axes[i].angle = 0.0;
    //axes[i].attach(); //must be called after pins declared
    char buffer[100];
    sprintf(buffer, "Axis %d attached at STEP: %d, DIR: %d\n", i, axes[i].STEP_PIN, axes[i].DIR_PIN);
 //   print_uart(buffer);

 }
   


    

    
	
	return 0;
}


